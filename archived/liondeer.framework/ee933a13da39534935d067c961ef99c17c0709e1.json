{
    "manifests": {
        "liondeer/framework": {
            "manifest": {
                "bundles": {
                    "Liondeer\\Framework\\LiondeerFrameworkBundle": [
                        "all"
                    ]
                },
                "copy-from-recipe": {
                    "config/": "config/",
                    "src/": "src/",
                    "Manager/": "src/Manager/",
                    "templates/": "templates/",
                    "translations/": "translations/"
                },
                "container": {
                    "app_env": "%env(APP_ENV)%",
                    "d3_app_name": "%env(D3_APP_NAME)%",
                    "d3_app_secret": "%env(D3_APP_SECRET)%",
                    "app_default_locale": "%env(APP_DEFAULT_LOCALE)%",
                    "d3_database_url": "%env(d3_db_url:D3_APP_NAME)%"
                },
                "env": {
                    "D3_APP_NAME": "provider-appName",
                    "D3_APP_SECRET": "secret",
                    "D3_DEFAULT_LOCALE": "de",
                    "APP_DEFAULT_LOCALE": "de",
                    "DATABASE_URL": "mysql://db:db@db:3306/db?serverVersion=5.7",
                    "CORS_ALLOW_ORIGIN": "$SERVER['HTTP_HOST']",
                    "TRUSTED_PROXIES": "127.0.0.1,REMOTE_ADDR"
                },
                "post-install-output": [
                    "<fg=blue>Read</>Please read the documentation at <comment>https://github.com/LionAndDeer/d3FrameworkBundle/blob/main/README.md</>"
                ]
            },
            "files": {
                "Manager/PermissionManager.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Manager;",
                        "",
                        "use App\\Security\\RoleAllocation;",
                        "",
                        "class PermissionManager",
                        "{",
                        "    public function __construct(",
                        "    ) {",
                        "    }",
                        "",
                        "    public function getUserPermissionsArray(string $tenantId, $groups): array",
                        "    {",
                        "        $groupArray = [];",
                        "        $roles = [];",
                        "        foreach ($groups as $group) {",
                        "            $groupArray[$group[1]] = $group[0];",
                        "            //Tenant-Admin",
                        "            if ('DC4885EF-A72C-4489-95A1-F37269D6E48D' == $group[1]) {",
                        "                $roles[] = RoleAllocation::ADMIN;",
                        "            }",
                        "        }",
                        "",
                        "        //TODO: Make your own premission logic",
                        "        $roles[] = RoleAllocation::USER;",
                        "",
                        "        return array_unique($roles);",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "config/packages/liondeerFramework.yaml": {
                    "contents": [
                        "services:",
                        "  _defaults:",
                        "    bind:",
                        "      $d3AppName: '%env(D3_APP_NAME)%'",
                        "",
                        "security:",
                        "  providers:",
                        "    users_in_memory: { memory: null }",
                        "    dms_user:",
                        "      id: Liondeer\\Framework\\Security\\D3UserProvider",
                        "    inter_app_user:",
                        "      id: Liondeer\\Framework\\Security\\InterAppProvider",
                        "",
                        "  # Der folgende Firewall-Block \u00fcberschreibt den in config/packages/security.yaml definierten block.",
                        "  # Sollte keine Authentifizierung \u00fcber d.velop User gew\u00fcnscht sein kann dieser Block hier auskommentiert werden,",
                        "  # um wieder den Symfony Standart zu nutzen. Wenn allerdings nur einzelne Bereiche ohne d.velop",
                        "  # Authentifizierung aufrufbar sein sollen k\u00f6nnen neue Firewall regeln hinzugef\u00fcgt werden.",
                        "  # siehe https://symfony.com/doc/current/security.html#the-firewall",
                        "  firewalls:",
                        "    dev:",
                        "      pattern: ^/(_(profiler|wdt)|css|images|js)/",
                        "      security: false",
                        "    stage:",
                        "      pattern: ^/(_(profiler|wdt)|css|images|js)/",
                        "      security: false",
                        "    lifecycle:",
                        "      pattern: ^/%d3_app_name%/dvelop-cloud-lifecycle-event",
                        "      security: false",
                        "    interAppIdentityProvider:",
                        "      pattern: ^/%d3_app_name%/interappauthenticationcallback",
                        "      security: false",
                        "    userIdentityProvider:",
                        "      pattern: ^/%d3_app_name%/userauthenticationcallback",
                        "      security: false",
                        "    upservice:",
                        "      pattern: ^/%d3_app_name%/upservice",
                        "      security: false",
                        "    translation:",
                        "      pattern: ^/%d3_app_name%/translation.js",
                        "      security: false",
                        "    sources:",
                        "      pattern: ^/%d3_app_name%/sources",
                        "      security: false",
                        "    index:",
                        "      pattern: ^/%d3_app_name%(/|)$",
                        "      security: false",
                        "    indexFeature:",
                        "      pattern: ^/%d3_app_name%/(configfeatures|features|dmsobjectextensions)$",
                        "      provider: inter_app_user",
                        "      custom_authenticators:",
                        "        - Liondeer\\Framework\\Security\\InterAppAuthenticator",
                        "    main:",
                        "      lazy: true",
                        "      provider: dms_user",
                        "",
                        "twig:",
                        "  form_themes: ['materializecss_layout.html.twig']",
                        "  globals:",
                        "    APP_ENV: '%env(APP_ENV)%'",
                        "    D3_APP_NAME: '%env(D3_APP_NAME)%'",
                        "",
                        "",
                        "",
                        ""
                    ],
                    "executable": false
                },
                "config/routes/liondeer-framework.yaml": {
                    "contents": [
                        "controllers:",
                        "  resource: ../../src/Controller/",
                        "  type: annotation",
                        "  prefix: /%d3_app_name%",
                        "",
                        "framework-controllers:",
                        "  resource: '@LiondeerFrameworkBundle/src/Controller/'",
                        "  type: annotation",
                        "  prefix: /%d3_app_name%",
                        "",
                        "lifecycle-controllers:",
                        "  resource: '@LiondeerFrameworkBundle/src/Lifecycle/'",
                        "  type: annotation",
                        "  prefix: /%d3_app_name%",
                        "",
                        "kernel:",
                        "  resource: ../../src/Kernel.php",
                        "  type: annotation"
                    ],
                    "executable": false
                },
                "src/Controller/TranslationController.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Controller;",
                        "",
                        "use Psr\\Log\\LoggerInterface;",
                        "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
                        "use Symfony\\Component\\HttpFoundation\\Request;",
                        "use Symfony\\Component\\HttpFoundation\\Response;",
                        "use Symfony\\Component\\Routing\\Annotation\\Route;",
                        "use Symfony\\Component\\Yaml\\Yaml;",
                        "",
                        "#[Route('/%d3_app_name%')]",
                        "class TranslationController extends AbstractController",
                        "{",
                        "    public function __construct()",
                        "    {",
                        "    }",
                        "",
                        "    #[Route('/translation.js', name: 'translation')]",
                        "    public function index(Request $request): Response",
                        "    {",
                        "        $locale = $request->getLocale();",
                        "        $file = __DIR__ . '/../../translations/messages.' . $locale . '.yml';",
                        "        $parsed = Yaml::parse(file_get_contents($file));",
                        "",
                        "        $translations = $this->renderView(",
                        "            'translation/translation.js.twig',",
                        "            [",
                        "                'json' => addslashes(json_encode($parsed)),",
                        "            ]",
                        "        );",
                        "",
                        "        return new Response($translations, Response::HTTP_OK, ['content-type' => 'text/javascript']);",
                        "    }",
                        "",
                        "}"
                    ],
                    "executable": false
                },
                "src/Controller/UpserviceController.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Controller;",
                        "",
                        "use Doctrine\\Common\\Collections\\ArrayCollection;",
                        "use Psr\\Log\\LoggerInterface;",
                        "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
                        "use Symfony\\Component\\HttpFoundation\\Response;",
                        "use Symfony\\Component\\Routing\\Annotation\\Route;",
                        "",
                        "class UpserviceController extends AbstractController",
                        "{",
                        "    public function __construct(",
                        "        private LoggerInterface $logger,",
                        "    ) {",
                        "    }",
                        "",
                        "    #[Route('/upservice', name: 'upservice')]",
                        "    public function index(): Response",
                        "    {",
                        "        return $this->render(",
                        "            'upservice/index.html.twig',",
                        "            [",
                        "                'services' => [",
                        "                    'HTTPS' => true,",
                        "                    'Database' => $this->checkDatabase(),",
                        "                    'API' => false,",
                        "                ],",
                        "                'xheaders' => $this->getXHeaders(),",
                        "            ]",
                        "        );",
                        "    }",
                        "",
                        "    private function checkDatabase(): bool",
                        "    {",
                        "        //TODO: Check Database Connection",
                        "        return true;",
                        "    }",
                        "",
                        "    private function getXHeaders(): array",
                        "    {",
                        "        $xheaders = [];",
                        "        if ($this->getParameter('app_env') == 'dev') {",
                        "            // @codeCoverageIgnoreStart",
                        "            $tenant = 'XXX'; //TODO Use your own",
                        "            $baseuri = 'https://yours.d-velop.cloud'; //TODO Use your own",
                        "            $private = base64_decode($this->getParameter(\"d3_app_secret\"));",
                        "",
                        "            $signature = base64_encode(hash_hmac('sha256', $baseuri . $tenant, $private, true));",
                        "",
                        "            $xheaders['tenant'] = $tenant;",
                        "            $xheaders['baseuri'] = $baseuri;",
                        "            $xheaders['signature'] = $signature;",
                        "            // @codeCoverageIgnoreEnd",
                        "        }",
                        "",
                        "        return $xheaders;",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "src/ControllerRegistrator.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App;",
                        "",
                        "use App\\Controller\\ConfigFeatureController;",
                        "use App\\Controller\\OutgoingInvoiceSourceController;",
                        "use Liondeer\\Framework\\Controller\\AbstractConfigFeatureController;",
                        "use Liondeer\\Framework\\Controller\\AbstractDmsObjectExtensionController;",
                        "use Liondeer\\Framework\\Controller\\AbstractFeatureController;",
                        "use Liondeer\\Framework\\Controller\\AbstractSourceController;",
                        "use Liondeer\\Framework\\Exception\\LiondeerD3FrameworkException;",
                        "",
                        "class ControllerRegistrator",
                        "{",
                        "    /** @var AbstractFeatureController[] */",
                        "    private array $featureControllers = [];",
                        "    /** @var AbstractConfigFeatureController[] */",
                        "    private array $configFeatureControllers = [];",
                        "    /** @var AbstractDmsObjectExtensionController[] */",
                        "    private array $dmsObjectExtensionControllers = [];",
                        "    /** @var AbstractSourceController[] */",
                        "    private array $sourceControllers = [];",
                        "",
                        "    //Im Konstruktor m\u00fcssen alle Feature- und ConfigFeature-Controller registriert werden",
                        "",
                        "    /**",
                        "     * @throws LiondeerD3FrameworkException",
                        "     */",
                        "    public function __construct(",
                        "        ConfigFeatureController $configFeatureController,",
                        "        OutgoingInvoiceSourceController $outgoingInvoiceSourceController,",
                        "    ){",
                        "        foreach (func_get_args() as $object) {",
                        "            if (is_a($object, AbstractFeatureController::class)) {",
                        "                array_push($this->featureControllers, $object);",
                        "            } elseif (is_a($object, AbstractConfigFeatureController::class)) {",
                        "                array_push($this->configFeatureControllers, $object);",
                        "            } elseif (is_a($object, AbstractDmsObjectExtensionController::class)) {",
                        "                array_push($this->dmsObjectExtensionControllers, $object);",
                        "            } elseif (is_a($object, AbstractSourceController::class)) {",
                        "                array_push($this->sourceControllers, $object);",
                        "            } else {",
                        "                $message = 'The class is neither \"'",
                        "                    . AbstractFeatureController::class",
                        "                    . '\" or \"'",
                        "                    . AbstractConfigFeatureController::class",
                        "                    .'\" or \"'",
                        "                    .AbstractDmsObjectExtensionController::class",
                        "                    .'\" or \"'",
                        "                    .AbstractSourceController::class;",
                        "",
                        "                throw new LiondeerD3FrameworkException($message, 'LD-1000');",
                        "            }",
                        "        }",
                        "    }",
                        "",
                        "    public function getFeatureControllers(): array",
                        "    {",
                        "        return $this->featureControllers;",
                        "    }",
                        "",
                        "    public function getConfigFeatureControllers(): array",
                        "    {",
                        "        return $this->configFeatureControllers;",
                        "    }",
                        "",
                        "    public function getDmsObjectExtensionControllers(): array",
                        "    {",
                        "        return $this->dmsObjectExtensionControllers;",
                        "    }",
                        "",
                        "    public function getSourceControllers(): array",
                        "    {",
                        "        return $this->sourceControllers;",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "src/Lifecycle/PurgeEvent.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Lifecycle;",
                        "",
                        "use Liondeer\\Framework\\Lifecycle\\AbstractLivecycleEvent;",
                        "",
                        "/** @codeCoverageIgnore */",
                        "class PurgeEvent extends AbstractLivecycleEvent",
                        "{",
                        "    public function __construct(",
                        "    ) {",
                        "    }",
                        "",
                        "    public function processEvent(array $parameters)",
                        "    {",
                        "        //TODO:DEFINE YOUR OWN EVENT",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "src/Lifecycle/ResubscribeEvent.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Lifecycle;",
                        "",
                        "use Liondeer\\Framework\\Lifecycle\\AbstractLivecycleEvent;",
                        "",
                        "/** @codeCoverageIgnore */",
                        "class ResubscribeEvent extends AbstractLivecycleEvent",
                        "{",
                        "    public function __construct(",
                        "    ) {",
                        "    }",
                        "",
                        "    public function processEvent(array $parameters)",
                        "    {",
                        "        //TODO:DEFINE YOUR OWN EVENT",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "src/Lifecycle/SubscribeEvent.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Lifecycle;",
                        "",
                        "use Liondeer\\Framework\\Lifecycle\\AbstractLivecycleEvent;",
                        "",
                        "/** @codeCoverageIgnore */",
                        "class SubscribeEvent extends AbstractLivecycleEvent",
                        "{",
                        "    public function __construct(",
                        "    ) {",
                        "    }",
                        "",
                        "    public function processEvent(array $parameters)",
                        "    {",
                        "        //TODO:DEFINE YOUR OWN EVENT",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "src/Lifecycle/UnsubscribeEvent.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Lifecycle;",
                        "",
                        "use Liondeer\\Framework\\Lifecycle\\AbstractLivecycleEvent;",
                        "",
                        "/** @codeCoverageIgnore */",
                        "class UnsubscribeEvent extends AbstractLivecycleEvent",
                        "{",
                        "    public function __construct(",
                        "    ) {",
                        "    }",
                        "",
                        "    public function processEvent(array $parameters)",
                        "    {",
                        "        //TODO:DEFINE YOUR OWN EVENT",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "src/Security/D3WebhookAuthenticator.php": {
                    "contents": [
                        "<?php /** @noinspection ALL */",
                        "",
                        "namespace App\\Security;",
                        "",
                        "use JetBrains\\PhpStorm\\ArrayShape;",
                        "use Psr\\Log\\LoggerInterface;",
                        "use Symfony\\Component\\HttpFoundation\\JsonResponse;",
                        "use Symfony\\Component\\HttpFoundation\\Request;",
                        "use Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;",
                        "use Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;",
                        "use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
                        "use Symfony\\Component\\Security\\Core\\User\\UserProviderInterface;",
                        "use Symfony\\Component\\Security\\Guard\\AbstractGuardAuthenticator;",
                        "",
                        "class D3WebhookAuthenticator extends AbstractGuardAuthenticator",
                        "{",
                        "    public function __construct(",
                        "        private LoggerInterface $logger",
                        "    )",
                        "    { }",
                        "",
                        "",
                        "    public function supports(Request $request): bool",
                        "    {",
                        "        if (",
                        "            $request->headers->has('x-dv-tenant-id')",
                        "            && $request->headers->has('x-dv-baseuri')",
                        "            && $request->headers->has('x-dv-api-key')",
                        "            && $request->headers->has('x-dv-request-count')",
                        "        ) {",
                        "            return true;",
                        "        }",
                        "",
                        "        return false;",
                        "    }",
                        "",
                        "    #[ArrayShape([",
                        "        'd3TenantId' => \"null|string\",",
                        "        'd3BaseUri' => \"null|string\",",
                        "        'd3ApiKey' => \"null|string\",",
                        "        'd3UserId' => \"null|string\"",
                        "    ])] public function getCredentials(",
                        "        Request $request",
                        "    ): array {",
                        "        return [",
                        "            'd3TenantId' => $request->headers->get('x-dv-tenant-id'),",
                        "            'd3BaseUri' => $request->headers->get('x-dv-baseuri'),",
                        "            'd3ApiKey' => $request->headers->get('x-dv-api-key'),",
                        "            'd3UserId' => $request->headers->get('x-dv-exec-user-id') ?: '',",
                        "        ];",
                        "    }",
                        "",
                        "    public function getUser($credentials, UserProviderInterface $userProvider): ?User",
                        "    {",
                        "        $tenant = $credentials['d3TenantId'];",
                        "",
                        "        if (null === $tenant) {",
                        "            return null;",
                        "        }",
                        "        $user = new User();",
                        "        $user->createDummyUser($credentials['d3BaseUri'], $tenant);",
                        "        $user->setBearerToken($credentials['d3ApiKey']);",
                        "",
                        "        return $user;",
                        "    }",
                        "",
                        "    public function checkCredentials($credentials, UserInterface $user): bool",
                        "    {",
                        "        $tenant = $credentials['d3TenantId'];",
                        "        $baseuri = $credentials['d3BaseUri'];",
                        "        $apiKey = $credentials['d3ApiKey'];",
                        "",
                        "        //TODO API Key gegen dvelop pr\u00fcfen",
                        "        return true;",
                        "    }",
                        "",
                        "    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)",
                        "    {",
                        "        $data = [",
                        "            'message' => strtr($exception->getMessageKey(), $exception->getMessageData())",
                        "",
                        "            // or to translate this message",
                        "            // $this->translator->trans($exception->getMessageKey(), $exception->getMessageData())",
                        "        ];",
                        "",
                        "        return new JsonResponse($data, Response::HTTP_FORBIDDEN);",
                        "    }",
                        "",
                        "    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $providerKey)",
                        "    {",
                        "        return null;",
                        "    }",
                        "",
                        "    public function start(Request $request, AuthenticationException $authException = null)",
                        "    {",
                        "        $data = [",
                        "            // you might translate this message",
                        "            'message' => 'Authentication Required'",
                        "        ];",
                        "",
                        "        return new JsonResponse($data, Response::HTTP_UNAUTHORIZED);",
                        "    }",
                        "",
                        "    public function supportsRememberMe()",
                        "    {",
                        "        return false;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/InterAppUser.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Security;",
                        "",
                        "use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
                        "",
                        "/** @codeCoverageIgnore */",
                        "class InterAppUser implements UserInterface",
                        "{",
                        "    private string $tenantId;",
                        "    private array $roles = [];",
                        "    private string $id;",
                        "    private string $username;",
                        "    private array $groups = [];",
                        "    private string $bearerToken;",
                        "    private string $baseUri;",
                        "",
                        "    public function getBaseUri(): string",
                        "    {",
                        "        return $this->baseUri;",
                        "    }",
                        "",
                        "    public function setBaseUri(string $baseUri): self",
                        "    {",
                        "        $this->baseUri = $baseUri;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function getBearerToken(): ?string",
                        "    {",
                        "        return $this->bearerToken;",
                        "    }",
                        "",
                        "    public function setBearerToken(string $bearerToken): self",
                        "    {",
                        "        $this->bearerToken = $bearerToken;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function getTenantId(): ?string",
                        "    {",
                        "        return $this->tenantId;",
                        "    }",
                        "",
                        "    public function setTenantId(string $tenantId): self",
                        "    {",
                        "        $this->tenantId = $tenantId;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function getUsername(): string",
                        "    {",
                        "        return $this->username;",
                        "    }",
                        "",
                        "    public function setUsername(string $username): self",
                        "    {",
                        "        $this->username = $username;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function getRoles(): array",
                        "    {",
                        "        $roles = $this->roles;",
                        "        $roles[] = RoleAllocation::USER;",
                        "",
                        "        return array_unique($roles);",
                        "    }",
                        "",
                        "    public function setRoles(array $roles): self",
                        "    {",
                        "        $this->roles = $roles;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function getId(): string",
                        "    {",
                        "        return $this->id;",
                        "    }",
                        "",
                        "    public function setId(string $id): self",
                        "    {",
                        "        $this->id = $id;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function getGroups(): array",
                        "    {",
                        "        return $this->groups;",
                        "    }",
                        "",
                        "    public function setGroups(array $groups): self",
                        "    {",
                        "        $this->groups = $groups;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @see UserInterface",
                        "     */",
                        "    public function getPassword()",
                        "    {",
                        "        // not needed for apps that do not check user passwords",
                        "    }",
                        "",
                        "    /**",
                        "     * @see UserInterface",
                        "     */",
                        "    public function getSalt()",
                        "    {",
                        "        // not needed for apps that do not check user passwords",
                        "    }",
                        "",
                        "    /**",
                        "     * @see UserInterface",
                        "     */",
                        "    public function eraseCredentials()",
                        "    {",
                        "        // If you store any temporary, sensitive data on the user, clear it here",
                        "        // $this->plainPassword = null;",
                        "    }",
                        "",
                        "    public function getUserIdentifier(): string",
                        "    {",
                        "        return $this->id;",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "src/Security/RoleAllocation.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Security;",
                        "",
                        "use Liondeer\\Framework\\Allocation\\AbstractAllocation;",
                        "",
                        "class RoleAllocation extends AbstractAllocation",
                        "{",
                        "    const ADMIN = 'ROLE_ADMIN';",
                        "    const USER = 'ROLE_USER';",
                        "",
                        "    public static function getValues(): array",
                        "    {",
                        "        return self::getAllocationValues();",
                        "    }",
                        "",
                        "    public static function getTranslationKey($constName): string",
                        "    {",
                        "        return self::getAllocationTranslationKey($constName);",
                        "    }",
                        "}"
                    ],
                    "executable": false
                },
                "src/Security/SmartInvoiceWebhookAuthenticator.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Security;",
                        "",
                        "use App\\Helper\\DuoConfigHelper;",
                        "use DateTime;",
                        "use JetBrains\\PhpStorm\\ArrayShape;",
                        "use Symfony\\Component\\HttpFoundation\\JsonResponse;",
                        "use Symfony\\Component\\HttpFoundation\\Request;",
                        "use Symfony\\Component\\HttpFoundation\\Response;",
                        "use Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;",
                        "use Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;",
                        "use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
                        "use Symfony\\Component\\Security\\Core\\User\\UserProviderInterface;",
                        "use Symfony\\Component\\Security\\Guard\\AbstractGuardAuthenticator;",
                        "",
                        "class SmartInvoiceWebhookAuthenticator extends AbstractGuardAuthenticator",
                        "{",
                        "    private string $requestBody;",
                        "",
                        "    public function __construct(private DuoConfigHelper $helper)",
                        "    {",
                        "    }",
                        "",
                        "    public function supports(Request $request): bool",
                        "    {",
                        "        return $request->headers->has('x-smart-invoice-signature');",
                        "    }",
                        "",
                        "    #[ArrayShape([",
                        "        't' => 'string',",
                        "        'v1' => 'string',",
                        "        'tenantId' => 'string',",
                        "        'baseUri' => 'string'",
                        "    ])]",
                        "    public function getCredentials(Request $request): array",
                        "    {",
                        "        $header = $request->headers->get('x-smart-invoice-signature');",
                        "        $tenantId = $request->headers->get('x-dv-tenant-id');",
                        "        $baseUri = $request->headers->get('x-dv-baseuri');",
                        "        $timestamp = substr(explode(',', $header)[0], 2);",
                        "        $signature = substr(explode(',', $header)[1], 3);",
                        "        $this->requestBody = $request->getContent();",
                        "",
                        "        return ['t' => $timestamp, 'v1' => $signature, 'tenantId' => $tenantId, 'baseUri' => $baseUri];",
                        "    }",
                        "",
                        "    public function getUser($credentials, UserProviderInterface $userProvider): User",
                        "    {",
                        "        $requestBody = json_decode($this->requestBody, true);",
                        "        $user = new User();",
                        "        $user->createDummyUser($credentials['baseUri'], $credentials['tenantId']);",
                        "        if (empty($user->getTenantId())) {",
                        "            if (array_key_exists('base_uri', $requestBody['tenant'])) {",
                        "                $user->createDummyUser($requestBody['tenant']['base_uri'], $requestBody['tenant']['id']);",
                        "            }",
                        "        }",
                        "",
                        "        return $user;",
                        "    }",
                        "",
                        "    public function checkCredentials($credentials, UserInterface $user): bool",
                        "    {",
                        "        //TODO: Secret aus DB holen!!!!!!!!!!!!!einself",
                        "        $shouldFinishAt = new DateTime('+5 sec');",
                        "        /** @var User $user */",
                        "        $secret = $this->helper->getSmartInvoiceSecret($user->getTenantId());",
                        "        $minimumTime = new DateTime('5 minutes ago');",
                        "",
                        "        if ($credentials['t'] < $minimumTime->getTimestamp()) {",
                        "            time_sleep_until($shouldFinishAt->getTimestamp());",
                        "",
                        "            return false;",
                        "        }",
                        "",
                        "        $concatenated = $credentials['t'] . '.' . $this->requestBody;",
                        "        $hashed = hash_hmac('sha256', $concatenated, $secret);",
                        "",
                        "        time_sleep_until($shouldFinishAt->getTimestamp());",
                        "",
                        "        return hash_equals($hashed, $credentials['v1']);",
                        "    }",
                        "",
                        "    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): JsonResponse",
                        "    {",
                        "        $data = [",
                        "            'message' => strtr($exception->getMessageKey(), $exception->getMessageData())",
                        "        ];",
                        "",
                        "        return new JsonResponse($data, Response::HTTP_FORBIDDEN);",
                        "    }",
                        "",
                        "    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $providerKey)",
                        "    {",
                        "        return null;",
                        "    }",
                        "",
                        "    public function start(Request $request, AuthenticationException $authException = null): JsonResponse",
                        "    {",
                        "        $data = [",
                        "            // you might translate this message",
                        "            'message' => 'Authentication Required'",
                        "        ];",
                        "",
                        "        return new JsonResponse($data, Response::HTTP_UNAUTHORIZED);",
                        "    }",
                        "",
                        "    public function supportsRememberMe(): bool",
                        "    {",
                        "        return false;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/User.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Security;",
                        "",
                        "use Liondeer\\Framework\\Model\\Tenant;",
                        "use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
                        "",
                        "/** @codeCoverageIgnore */",
                        "class User implements UserInterface",
                        "{",
                        "    // TODO: Abstract",
                        "    private string $tenantId;",
                        "    private array $roles = [];",
                        "    private string $id;",
                        "    private string $username;",
                        "    private string $firstName;",
                        "    private string $lastName;",
                        "    private string $title;",
                        "    private array $emails = [];",
                        "    private array $phoneNumbers = [];",
                        "    private array $groups = [];",
                        "    private array $photos = [];",
                        "    private ?string $bearerToken = null;",
                        "    private string $baseUri;",
                        "    private string $displayName;",
                        "",
                        "    public function getDisplayName(): string",
                        "    {",
                        "        return $this->displayName;",
                        "    }",
                        "",
                        "    public function setDisplayName(string $displayName): User",
                        "    {",
                        "        $this->displayName = $displayName;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "",
                        "    public function getBearerToken(): ?string",
                        "    {",
                        "        return $this->bearerToken;",
                        "    }",
                        "",
                        "    public function setBearerToken(string $bearerToken): self",
                        "    {",
                        "        $this->bearerToken = $bearerToken;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * A visual identifier that represents this user.",
                        "     *",
                        "     * @see UserInterface",
                        "     */",
                        "    public function getUsername(): string",
                        "    {",
                        "        return $this->username;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param string $username",
                        "     *",
                        "     * @return User",
                        "     */",
                        "    public function setUsername(string $username): self",
                        "    {",
                        "        $this->username = $username;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @see UserInterface",
                        "     */",
                        "    public function getRoles(): array",
                        "    {",
                        "        //return (['ROLE_USER']);",
                        "",
                        "        return array_unique($this->roles);",
                        "    }",
                        "",
                        "    public function setRoles(array $roles): self",
                        "    {",
                        "        $this->roles = $roles;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @return string",
                        "     */",
                        "    public function getFirstName(): string",
                        "    {",
                        "        return $this->firstName;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param string $firstName",
                        "     *",
                        "     * @return User",
                        "     */",
                        "    public function setFirstName(string $firstName): self",
                        "    {",
                        "        $this->firstName = $firstName;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @return string",
                        "     */",
                        "    public function getLastName(): string",
                        "    {",
                        "        return $this->lastName;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param string $lastName",
                        "     *",
                        "     * @return User",
                        "     */",
                        "    public function setLastName(string $lastName): self",
                        "    {",
                        "        $this->lastName = $lastName;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @return string",
                        "     */",
                        "    public function getTitle(): string",
                        "    {",
                        "        return $this->title;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param string $title",
                        "     *",
                        "     * @return User",
                        "     */",
                        "    public function setTitle(string $title): self",
                        "    {",
                        "        $this->title = $title;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @return array",
                        "     */",
                        "    public function getEmails(): array",
                        "    {",
                        "        return $this->emails;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param array $emails",
                        "     *",
                        "     * @return User",
                        "     */",
                        "    public function setEmails(array $emails): self",
                        "    {",
                        "        $this->emails = $emails;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @return array",
                        "     */",
                        "    public function getPhoneNumbers(): array",
                        "    {",
                        "        return $this->phoneNumbers;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param array $phoneNumbers",
                        "     *",
                        "     * @return User",
                        "     */",
                        "    public function setPhoneNumbers(array $phoneNumbers): self",
                        "    {",
                        "        $this->phoneNumbers = $phoneNumbers;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @return array",
                        "     */",
                        "    public function getGroups(): array",
                        "    {",
                        "        return $this->groups;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param array $groups",
                        "     *",
                        "     * @return User",
                        "     */",
                        "    public function setGroups(array $groups): self",
                        "    {",
                        "        $this->groups = $groups;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @return array",
                        "     */",
                        "    public function getPhotos(): array",
                        "    {",
                        "        return $this->photos;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param array $photos",
                        "     *",
                        "     * @return User",
                        "     */",
                        "    public function setPhotos(array $photos): self",
                        "    {",
                        "        $this->photos = $photos;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function createDummyUser(string $baseUri, string $tenantId): self",
                        "    {",
                        "        $this->id = '1';",
                        "        $this->username = 'brave.elephant';",
                        "        $this->firstName = 'Brave';",
                        "        $this->lastName = 'Elephant';",
                        "        $this->roles = ['ROLE_BRAVE_USER'];",
                        "        $this->baseUri = $baseUri;",
                        "        $this->tenantId = $tenantId;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function getTenant(): Tenant",
                        "    {",
                        "        $tenant = new Tenant();",
                        "        $tenant",
                        "            ->setTenantId($this->getTenantId())",
                        "            ->setBaseUri($this->getBaseUri());",
                        "",
                        "        return $tenant;",
                        "    }",
                        "",
                        "    public function getTenantId(): ?string",
                        "    {",
                        "        return $this->tenantId;",
                        "    }",
                        "",
                        "    public function setTenantId(string $tenantId): self",
                        "    {",
                        "        $this->tenantId = $tenantId;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function getBaseUri(): string",
                        "    {",
                        "        return $this->baseUri;",
                        "    }",
                        "",
                        "    public function setBaseUri(string $baseUri): self",
                        "    {",
                        "        $this->baseUri = $baseUri;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    /**",
                        "     * @see UserInterface",
                        "     */",
                        "    public function getPassword(): ?string",
                        "    {",
                        "        // not needed for apps that do not check user passwords",
                        "        return null;",
                        "    }",
                        "",
                        "    /**",
                        "     * @see UserInterface",
                        "     */",
                        "    public function getSalt(): ?string",
                        "    {",
                        "        // not needed for apps that do not check user passwords",
                        "        return null;",
                        "    }",
                        "",
                        "    /**",
                        "     * @see UserInterface",
                        "     */",
                        "    public function eraseCredentials()",
                        "    {",
                        "        // If you store any temporary, sensitive data on the user, clear it here",
                        "        // $this->plainPassword = null;",
                        "    }",
                        "",
                        "//    public function getSignature(): string",
                        "//    {",
                        "//        $userSignatureHelper = new UserSignatureHelper();",
                        "//",
                        "//        return $userSignatureHelper->getSignature($this->getTenantId(), $this->getId());",
                        "//    }",
                        "",
                        "    /**",
                        "     * @return string",
                        "     */",
                        "    public function getId(): string",
                        "    {",
                        "        return $this->id;",
                        "    }",
                        "",
                        "    /**",
                        "     * @param string $id",
                        "     *",
                        "     * @return User",
                        "     */",
                        "    public function setId(string $id): self",
                        "    {",
                        "        $this->id = $id;",
                        "",
                        "        return $this;",
                        "    }",
                        "",
                        "    public function getUserIdentifier(): string",
                        "    {",
                        "        return $this->id;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/UserHelper.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Security;",
                        "",
                        "use App\\Manager\\PermissionManager;",
                        "use Liondeer\\Framework\\D3\\Model\\UserResponse;",
                        "use Liondeer\\Framework\\D3\\Proxy\\IdentityProvider\\UserProxy;",
                        "use Liondeer\\Framework\\Exception\\LiondeerD3FrameworkException;",
                        "use Liondeer\\Framework\\Security\\UserHelperInterface;",
                        "use Symfony\\Component\\Serializer\\SerializerInterface;",
                        "use Symfony\\Contracts\\HttpClient\\Exception\\ClientExceptionInterface;",
                        "use Symfony\\Contracts\\HttpClient\\Exception\\RedirectionExceptionInterface;",
                        "use Symfony\\Contracts\\HttpClient\\Exception\\ServerExceptionInterface;",
                        "use Symfony\\Contracts\\HttpClient\\Exception\\TransportExceptionInterface;",
                        "",
                        "class UserHelper implements UserHelperInterface",
                        "{",
                        "",
                        "    private string $bearer;",
                        "    private array $credentials;",
                        "    private UserResponse $userResponse;",
                        "",
                        "    public function __construct(",
                        "        private SerializerInterface $serializer,",
                        "        private PermissionManager $permissionManager,",
                        "        private UserProxy $identityProviderUserService",
                        "    ) {",
                        "    }",
                        "",
                        "    /**",
                        "     * @throws ClientExceptionInterface",
                        "     * @throws LiondeerD3FrameworkException",
                        "     * @throws RedirectionExceptionInterface",
                        "     * @throws ServerExceptionInterface",
                        "     * @throws TransportExceptionInterface",
                        "     */",
                        "    public function getCurrentUser($bearerToken, $credentials): User|InterAppUser",
                        "    {",
                        "        if (empty($bearerToken) && !empty($credentials['authSessionId'])) {",
                        "            $bearerToken = $credentials['authSessionId'];",
                        "        }",
                        "        $this->bearer = $bearerToken;",
                        "        $this->credentials = $credentials;",
                        "        $this->userResponse = $this->identityProviderUserService->validate($bearerToken, $credentials);",
                        "",
                        "        if (array_search('Apps', $this->userResponse->getGroups())) {",
                        "            return $this->getInterAppuser();",
                        "        } else {",
                        "            return $this->getD3User();",
                        "        }",
                        "    }",
                        "",
                        "    private function getInterAppuser(): InterAppUser",
                        "    {",
                        "        $interAppuser = new InterAppUser();",
                        "        $interAppuser",
                        "            ->setUsername($this->userResponse->getUserName())",
                        "            ->setGroups($this->userResponse->getGroups())",
                        "            ->setBearerToken($this->bearer)",
                        "            ->setBaseUri($this->credentials['d3BaseUri'])",
                        "            ->setTenantId($this->credentials['d3TenantId'])",
                        "            ->setId($this->userResponse->getId());",
                        "",
                        "        return $interAppuser;",
                        "    }",
                        "",
                        "    private function getD3User(): User",
                        "    {",
                        "        $user = new User();",
                        "",
                        "        $user",
                        "            ->setId($this->userResponse->getId())",
                        "            ->setGroups($this->userResponse->getGroups())",
                        "            ->setRoles(",
                        "                $this->permissionManager->getUserPermissionsArray(",
                        "                    $this->credentials['d3TenantId'],",
                        "                    $this->userResponse->getGroups()",
                        "                )",
                        "            )",
                        "            ->setFirstName($this->userResponse->getName()->getGivenName())",
                        "            ->setLastName($this->userResponse->getName()->getFamilyName())",
                        "            ->setEmails($this->userResponse->getEmails())",
                        "            ->setUsername($this->userResponse->getUserName())",
                        "            ->setDisplayName($this->userResponse->getDisplayName())",
                        "            ->setBearerToken($this->bearer)",
                        "            ->setBaseUri($this->credentials['d3BaseUri'])",
                        "            ->setTenantId($this->credentials['d3TenantId'])",
                        "            ->setPhotos($this->userResponse->getPhotos());",
                        "",
                        "        return $user;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/VERSION": {
                    "contents": [
                        "V0.0.1"
                    ],
                    "executable": false
                },
                "templates/translation/translation.js.twig": {
                    "contents": [
                        "let trans = JSON.parse('{{  json|raw }}');",
                        "let parseTranslationKey = (key) => {",
                        "// kann auch abc.xyz parsen",
                        "    let parts = key.split('.');",
                        "    let last = trans;",
                        "    for (let c = 0; c < parts.length; c++) {",
                        "        let keyFragment = parts[c];",
                        "        last = last[keyFragment];",
                        "    }",
                        "    return last;",
                        "}"
                    ],
                    "executable": false
                },
                "templates/upservice/index.html.twig": {
                    "contents": [
                        "<!DOCTYPE html>",
                        "<html>",
                        "<head>",
                        "    <meta charset=\"UTF-8\">",
                        "    <title>Upservice</title>",
                        "</head>",
                        "<body>",
                        "",
                        "<h3>Status</h3>",
                        "{% for service, status in services %}",
                        "    {% if status %}",
                        "        * {{ service }} - OK<br>",
                        "    {% else %}",
                        "        * {{ service }} - FAILED<br>",
                        "    {% endif %}",
                        "{% endfor %}",
                        "",
                        "{% if APP_ENV == 'dev' %}",
                        "    <h3>Request-Headers</h3>",
                        "    * x-dv-tenant-id: {{ xheaders.tenant }}<br>",
                        "    * x-dv-baseuri: {{ xheaders.baseuri }}<br>",
                        "    * x-dv-sig-1: {{ xheaders.signature }}<br>",
                        "{% endif %}",
                        "</body>",
                        "</html>",
                        ""
                    ],
                    "executable": false
                },
                "translations/messages.de.yaml": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "ee933a13da39534935d067c961ef99c17c0709e1"
        }
    }
}
